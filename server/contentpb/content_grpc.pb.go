// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: content.proto

package contentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NexivilClient is the client API for Nexivil service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexivilClient interface {
	ListContents(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (Nexivil_ListContentsClient, error)
}

type nexivilClient struct {
	cc grpc.ClientConnInterface
}

func NewNexivilClient(cc grpc.ClientConnInterface) NexivilClient {
	return &nexivilClient{cc}
}

func (c *nexivilClient) ListContents(ctx context.Context, in *ContentRequest, opts ...grpc.CallOption) (Nexivil_ListContentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Nexivil_ServiceDesc.Streams[0], "/contents.Nexivil/ListContents", opts...)
	if err != nil {
		return nil, err
	}
	x := &nexivilListContentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Nexivil_ListContentsClient interface {
	Recv() (*ContentResponse, error)
	grpc.ClientStream
}

type nexivilListContentsClient struct {
	grpc.ClientStream
}

func (x *nexivilListContentsClient) Recv() (*ContentResponse, error) {
	m := new(ContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NexivilServer is the server API for Nexivil service.
// All implementations must embed UnimplementedNexivilServer
// for forward compatibility
type NexivilServer interface {
	ListContents(*ContentRequest, Nexivil_ListContentsServer) error
	mustEmbedUnimplementedNexivilServer()
}

// UnimplementedNexivilServer must be embedded to have forward compatible implementations.
type UnimplementedNexivilServer struct {
}

func (UnimplementedNexivilServer) ListContents(*ContentRequest, Nexivil_ListContentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListContents not implemented")
}
func (UnimplementedNexivilServer) mustEmbedUnimplementedNexivilServer() {}

// UnsafeNexivilServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexivilServer will
// result in compilation errors.
type UnsafeNexivilServer interface {
	mustEmbedUnimplementedNexivilServer()
}

func RegisterNexivilServer(s grpc.ServiceRegistrar, srv NexivilServer) {
	s.RegisterService(&Nexivil_ServiceDesc, srv)
}

func _Nexivil_ListContents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NexivilServer).ListContents(m, &nexivilListContentsServer{stream})
}

type Nexivil_ListContentsServer interface {
	Send(*ContentResponse) error
	grpc.ServerStream
}

type nexivilListContentsServer struct {
	grpc.ServerStream
}

func (x *nexivilListContentsServer) Send(m *ContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Nexivil_ServiceDesc is the grpc.ServiceDesc for Nexivil service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nexivil_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contents.Nexivil",
	HandlerType: (*NexivilServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListContents",
			Handler:       _Nexivil_ListContents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "content.proto",
}
